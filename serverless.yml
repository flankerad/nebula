
service: nebula # NOTE: update this with your service name

custom:
  app_name: nebula
  default_stage: dev
  default_profile: flanker
  profile: ${opt:profile, self:custom.default_profile}
  stage: ${opt:stage, self:custom.default_stage}
  region: ${opt:region, 'us-east-1'}
  stack_name: ${self:custom.app_name}-${self:custom.stage}
  pythonRequirements:
    usePipenv: true
    zip: true
    slim: true
  dynamodb:
  # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
    # Uncomment only if you already have a DynamoDB running locally
    # noStart: true

provider:
  name: aws
  runtime: python3.7
  cfLogs: true
  stage: ${self:custom.stage}
  profile: ${self:custom.profile}
  region: ${self:custom.region}
  environment:
    S3_BUCKET_NAME: "${self:service}-${opt:stage, self:provider.stage}-resbody"
    DYNAMODB_TABLE: "${self:service}-${opt:stage, self:provider.stage}-processing"
  iamRoleStatements:
    - Effect: Allow
      Action:
      - "s3:*"
      Resource: "arn:aws:s3:::${self:provider.environment.S3_BUCKET_NAME}/*"
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:DescribeStream
        - dynamodb:ListStreams
        - dynamodb:GetShardIterator
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:712533631256:table/${self:provider.environment.DYNAMODB_TABLE}/stream/*"

functions:
  get_title:
    handler: lambda/title.get_title
    memorySize: 256
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [ ProcessingTable, StreamArn ]
          batchSize: 1
          startingPosition: LATEST
          enabled: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DescribeTable
          - dynamodb:DescribeStream
          - dynamodb:ListStreams
          - dynamodb:GetShardIterator
        Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:712533631256:table/${self:provider.environment.DYNAMODB_TABLE}/stream/*"

  store_dynamo:
      handler: lambda/store_dynamo.store_dynamo
      memorySize: 256
      events:
        - http:
            path: lambda/store_dynamo
            method: post
            cors: true
      environment:
        FUNCTION_ASYNC: "get_title"
  query_dynamo:
    handler: lambda/query.query_dynamo
    memorySize: 256
    events:
      - http:
          path: lambda/query
          method: post
          cors: true

package:
  exclude:
    - node_modules/**
    - .idea/**
    - .requirements/**
    - env/**
    - README.md
    - package.json
    - package-lock.json
    - requirements.txt
    - __pycache__/**

plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-dynamodb-local

resources:
  Resources:
    UploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET_NAME}
        CorsConfiguration:
          CorsRules:
          - AllowedMethods:
            - GET
            - PUT
            - POST
            - HEAD
            AllowedOrigins:
            - "*"
            AllowedHeaders:
            - "*"

    ProcessingTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        # Set the capacity based on the stage
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_IMAGE
